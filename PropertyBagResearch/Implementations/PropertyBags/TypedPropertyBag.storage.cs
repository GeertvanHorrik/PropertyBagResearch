
//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by a tool. 
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------


namespace Catel.Data
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    //using Catel.Reflection;

    public partial class TypedPropertyBag
    {
        private Dictionary<string, Object> _objectSettersCache;
        private Dictionary<string, Boolean> _booleanSettersCache;
        private Dictionary<string, Char> _charSettersCache;
        private Dictionary<string, SByte> _sbyteSettersCache;
        private Dictionary<string, Byte> _byteSettersCache;
        private Dictionary<string, Int16> _int16SettersCache;
        private Dictionary<string, UInt16> _uint16SettersCache;
        private Dictionary<string, Int32> _int32SettersCache;
        private Dictionary<string, UInt32> _uint32SettersCache;
        private Dictionary<string, Int64> _int64SettersCache;
        private Dictionary<string, UInt64> _uint64SettersCache;
        private Dictionary<string, Single> _singleSettersCache;
        private Dictionary<string, Double> _doubleSettersCache;
        private Dictionary<string, Decimal> _decimalSettersCache;
        private Dictionary<string, DateTime> _datetimeSettersCache;
        private Dictionary<string, String> _stringSettersCache;

        protected Dictionary<string, Object> GetObjectStorage()
        {
            if (_objectSettersCache is null)
            {
                _objectSettersCache = new Dictionary<string, Object>();
            }

            return _objectSettersCache;
        }

        protected Dictionary<string, Boolean> GetBooleanStorage()
        {
            if (_booleanSettersCache is null)
            {
                _booleanSettersCache = new Dictionary<string, Boolean>();
            }

            return _booleanSettersCache;
        }

        protected Dictionary<string, Char> GetCharStorage()
        {
            if (_charSettersCache is null)
            {
                _charSettersCache = new Dictionary<string, Char>();
            }

            return _charSettersCache;
        }

        protected Dictionary<string, SByte> GetSByteStorage()
        {
            if (_sbyteSettersCache is null)
            {
                _sbyteSettersCache = new Dictionary<string, SByte>();
            }

            return _sbyteSettersCache;
        }

        protected Dictionary<string, Byte> GetByteStorage()
        {
            if (_byteSettersCache is null)
            {
                _byteSettersCache = new Dictionary<string, Byte>();
            }

            return _byteSettersCache;
        }

        protected Dictionary<string, Int16> GetInt16Storage()
        {
            if (_int16SettersCache is null)
            {
                _int16SettersCache = new Dictionary<string, Int16>();
            }

            return _int16SettersCache;
        }

        protected Dictionary<string, UInt16> GetUInt16Storage()
        {
            if (_uint16SettersCache is null)
            {
                _uint16SettersCache = new Dictionary<string, UInt16>();
            }

            return _uint16SettersCache;
        }

        protected Dictionary<string, Int32> GetInt32Storage()
        {
            if (_int32SettersCache is null)
            {
                _int32SettersCache = new Dictionary<string, Int32>();
            }

            return _int32SettersCache;
        }

        protected Dictionary<string, UInt32> GetUInt32Storage()
        {
            if (_uint32SettersCache is null)
            {
                _uint32SettersCache = new Dictionary<string, UInt32>();
            }

            return _uint32SettersCache;
        }

        protected Dictionary<string, Int64> GetInt64Storage()
        {
            if (_int64SettersCache is null)
            {
                _int64SettersCache = new Dictionary<string, Int64>();
            }

            return _int64SettersCache;
        }

        protected Dictionary<string, UInt64> GetUInt64Storage()
        {
            if (_uint64SettersCache is null)
            {
                _uint64SettersCache = new Dictionary<string, UInt64>();
            }

            return _uint64SettersCache;
        }

        protected Dictionary<string, Single> GetSingleStorage()
        {
            if (_singleSettersCache is null)
            {
                _singleSettersCache = new Dictionary<string, Single>();
            }

            return _singleSettersCache;
        }

        protected Dictionary<string, Double> GetDoubleStorage()
        {
            if (_doubleSettersCache is null)
            {
                _doubleSettersCache = new Dictionary<string, Double>();
            }

            return _doubleSettersCache;
        }

        protected Dictionary<string, Decimal> GetDecimalStorage()
        {
            if (_decimalSettersCache is null)
            {
                _decimalSettersCache = new Dictionary<string, Decimal>();
            }

            return _decimalSettersCache;
        }

        protected Dictionary<string, DateTime> GetDateTimeStorage()
        {
            if (_datetimeSettersCache is null)
            {
                _datetimeSettersCache = new Dictionary<string, DateTime>();
            }

            return _datetimeSettersCache;
        }

        protected Dictionary<string, String> GetStringStorage()
        {
            if (_stringSettersCache is null)
            {
                _stringSettersCache = new Dictionary<string, String>();
            }

            return _stringSettersCache;
        }


        public override TValue GetValue<TValue>(string name, TValue defaultValue = default)
        {
            //Argument.IsNotNullOrWhitespace(nameof(name), name);

            var targetValue = typeof(TValue);

            if (targetValue == typeof(Boolean))
            {
                var storage = GetBooleanStorage();

                lock (storage)
                {
                    if (storage.TryGetValue(name, out var bagValue))
                    {
                        var tr = __makeref(bagValue);
                        var value = __refvalue(tr, TValue);
                        return value;
                    }
                }

                return default;
            }
            if (targetValue == typeof(Char))
            {
                var storage = GetCharStorage();

                lock (storage)
                {
                    if (storage.TryGetValue(name, out var bagValue))
                    {
                        var tr = __makeref(bagValue);
                        var value = __refvalue(tr, TValue);
                        return value;
                    }
                }

                return default;
            }
            if (targetValue == typeof(SByte))
            {
                var storage = GetSByteStorage();

                lock (storage)
                {
                    if (storage.TryGetValue(name, out var bagValue))
                    {
                        var tr = __makeref(bagValue);
                        var value = __refvalue(tr, TValue);
                        return value;
                    }
                }

                return default;
            }
            if (targetValue == typeof(Byte))
            {
                var storage = GetByteStorage();

                lock (storage)
                {
                    if (storage.TryGetValue(name, out var bagValue))
                    {
                        var tr = __makeref(bagValue);
                        var value = __refvalue(tr, TValue);
                        return value;
                    }
                }

                return default;
            }
            if (targetValue == typeof(Int16))
            {
                var storage = GetInt16Storage();

                lock (storage)
                {
                    if (storage.TryGetValue(name, out var bagValue))
                    {
                        var tr = __makeref(bagValue);
                        var value = __refvalue(tr, TValue);
                        return value;
                    }
                }

                return default;
            }
            if (targetValue == typeof(UInt16))
            {
                var storage = GetUInt16Storage();

                lock (storage)
                {
                    if (storage.TryGetValue(name, out var bagValue))
                    {
                        var tr = __makeref(bagValue);
                        var value = __refvalue(tr, TValue);
                        return value;
                    }
                }

                return default;
            }
            if (targetValue == typeof(Int32))
            {
                var storage = GetInt32Storage();

                lock (storage)
                {
                    if (storage.TryGetValue(name, out var bagValue))
                    {
                        var tr = __makeref(bagValue);
                        var value = __refvalue(tr, TValue);
                        return value;
                    }
                }

                return default;
            }
            if (targetValue == typeof(UInt32))
            {
                var storage = GetUInt32Storage();

                lock (storage)
                {
                    if (storage.TryGetValue(name, out var bagValue))
                    {
                        var tr = __makeref(bagValue);
                        var value = __refvalue(tr, TValue);
                        return value;
                    }
                }

                return default;
            }
            if (targetValue == typeof(Int64))
            {
                var storage = GetInt64Storage();

                lock (storage)
                {
                    if (storage.TryGetValue(name, out var bagValue))
                    {
                        var tr = __makeref(bagValue);
                        var value = __refvalue(tr, TValue);
                        return value;
                    }
                }

                return default;
            }
            if (targetValue == typeof(UInt64))
            {
                var storage = GetUInt64Storage();

                lock (storage)
                {
                    if (storage.TryGetValue(name, out var bagValue))
                    {
                        var tr = __makeref(bagValue);
                        var value = __refvalue(tr, TValue);
                        return value;
                    }
                }

                return default;
            }
            if (targetValue == typeof(Single))
            {
                var storage = GetSingleStorage();

                lock (storage)
                {
                    if (storage.TryGetValue(name, out var bagValue))
                    {
                        var tr = __makeref(bagValue);
                        var value = __refvalue(tr, TValue);
                        return value;
                    }
                }

                return default;
            }
            if (targetValue == typeof(Double))
            {
                var storage = GetDoubleStorage();

                lock (storage)
                {
                    if (storage.TryGetValue(name, out var bagValue))
                    {
                        var tr = __makeref(bagValue);
                        var value = __refvalue(tr, TValue);
                        return value;
                    }
                }

                return default;
            }
            if (targetValue == typeof(Decimal))
            {
                var storage = GetDecimalStorage();

                lock (storage)
                {
                    if (storage.TryGetValue(name, out var bagValue))
                    {
                        var tr = __makeref(bagValue);
                        var value = __refvalue(tr, TValue);
                        return value;
                    }
                }

                return default;
            }
            if (targetValue == typeof(DateTime))
            {
                var storage = GetDateTimeStorage();

                lock (storage)
                {
                    if (storage.TryGetValue(name, out var bagValue))
                    {
                        var tr = __makeref(bagValue);
                        var value = __refvalue(tr, TValue);
                        return value;
                    }
                }

                return default;
            }
            if (targetValue == typeof(String))
            {
                var storage = GetStringStorage();

                lock (storage)
                {
                    if (storage.TryGetValue(name, out var bagValue))
                    {
                        var tr = __makeref(bagValue);
                        var value = __refvalue(tr, TValue);
                        return value;
                    }
                }

                return default;
            }

            // Fallback to object store
            {
                var storage = GetObjectStorage();

                lock (storage)
                {
                    if (storage.TryGetValue(name, out var bagValue))
                    {
                        var tr = __makeref(bagValue);
                        var value = __refvalue(tr, TValue);
                        return value;
                    }
                }

                return default;
            }
        }

        public override void SetValue<TValue>(string name, TValue value)
        {
            //Argument.IsNotNullOrWhitespace(nameof(name), name);

            var raisePropertyChanged = false;

            var targetValue = typeof(TValue);
            if (false) 
            {
                // dummy code to enable switches
            }
            else if (targetValue == typeof(Boolean))
            {
                EnsureIntegrity(name, typeof(TValue));

                var tr = __makeref(value);
                var bagValue = __refvalue(tr, Boolean);
                var storage = GetBooleanStorage();

                lock (storage)
                {
                    if (!storage.TryGetValue(name, out var propertyValue) || propertyValue != bagValue)
                    {
                        storage[name] = bagValue;
                        raisePropertyChanged = true;
                    }
                }
            }
            else if (targetValue == typeof(Char))
            {
                EnsureIntegrity(name, typeof(TValue));

                var tr = __makeref(value);
                var bagValue = __refvalue(tr, Char);
                var storage = GetCharStorage();

                lock (storage)
                {
                    if (!storage.TryGetValue(name, out var propertyValue) || propertyValue != bagValue)
                    {
                        storage[name] = bagValue;
                        raisePropertyChanged = true;
                    }
                }
            }
            else if (targetValue == typeof(SByte))
            {
                EnsureIntegrity(name, typeof(TValue));

                var tr = __makeref(value);
                var bagValue = __refvalue(tr, SByte);
                var storage = GetSByteStorage();

                lock (storage)
                {
                    if (!storage.TryGetValue(name, out var propertyValue) || propertyValue != bagValue)
                    {
                        storage[name] = bagValue;
                        raisePropertyChanged = true;
                    }
                }
            }
            else if (targetValue == typeof(Byte))
            {
                EnsureIntegrity(name, typeof(TValue));

                var tr = __makeref(value);
                var bagValue = __refvalue(tr, Byte);
                var storage = GetByteStorage();

                lock (storage)
                {
                    if (!storage.TryGetValue(name, out var propertyValue) || propertyValue != bagValue)
                    {
                        storage[name] = bagValue;
                        raisePropertyChanged = true;
                    }
                }
            }
            else if (targetValue == typeof(Int16))
            {
                EnsureIntegrity(name, typeof(TValue));

                var tr = __makeref(value);
                var bagValue = __refvalue(tr, Int16);
                var storage = GetInt16Storage();

                lock (storage)
                {
                    if (!storage.TryGetValue(name, out var propertyValue) || propertyValue != bagValue)
                    {
                        storage[name] = bagValue;
                        raisePropertyChanged = true;
                    }
                }
            }
            else if (targetValue == typeof(UInt16))
            {
                EnsureIntegrity(name, typeof(TValue));

                var tr = __makeref(value);
                var bagValue = __refvalue(tr, UInt16);
                var storage = GetUInt16Storage();

                lock (storage)
                {
                    if (!storage.TryGetValue(name, out var propertyValue) || propertyValue != bagValue)
                    {
                        storage[name] = bagValue;
                        raisePropertyChanged = true;
                    }
                }
            }
            else if (targetValue == typeof(Int32))
            {
                EnsureIntegrity(name, typeof(TValue));

                var tr = __makeref(value);
                var bagValue = __refvalue(tr, Int32);
                var storage = GetInt32Storage();

                lock (storage)
                {
                    if (!storage.TryGetValue(name, out var propertyValue) || propertyValue != bagValue)
                    {
                        storage[name] = bagValue;
                        raisePropertyChanged = true;
                    }
                }
            }
            else if (targetValue == typeof(UInt32))
            {
                EnsureIntegrity(name, typeof(TValue));

                var tr = __makeref(value);
                var bagValue = __refvalue(tr, UInt32);
                var storage = GetUInt32Storage();

                lock (storage)
                {
                    if (!storage.TryGetValue(name, out var propertyValue) || propertyValue != bagValue)
                    {
                        storage[name] = bagValue;
                        raisePropertyChanged = true;
                    }
                }
            }
            else if (targetValue == typeof(Int64))
            {
                EnsureIntegrity(name, typeof(TValue));

                var tr = __makeref(value);
                var bagValue = __refvalue(tr, Int64);
                var storage = GetInt64Storage();

                lock (storage)
                {
                    if (!storage.TryGetValue(name, out var propertyValue) || propertyValue != bagValue)
                    {
                        storage[name] = bagValue;
                        raisePropertyChanged = true;
                    }
                }
            }
            else if (targetValue == typeof(UInt64))
            {
                EnsureIntegrity(name, typeof(TValue));

                var tr = __makeref(value);
                var bagValue = __refvalue(tr, UInt64);
                var storage = GetUInt64Storage();

                lock (storage)
                {
                    if (!storage.TryGetValue(name, out var propertyValue) || propertyValue != bagValue)
                    {
                        storage[name] = bagValue;
                        raisePropertyChanged = true;
                    }
                }
            }
            else if (targetValue == typeof(Single))
            {
                EnsureIntegrity(name, typeof(TValue));

                var tr = __makeref(value);
                var bagValue = __refvalue(tr, Single);
                var storage = GetSingleStorage();

                lock (storage)
                {
                    if (!storage.TryGetValue(name, out var propertyValue) || propertyValue != bagValue)
                    {
                        storage[name] = bagValue;
                        raisePropertyChanged = true;
                    }
                }
            }
            else if (targetValue == typeof(Double))
            {
                EnsureIntegrity(name, typeof(TValue));

                var tr = __makeref(value);
                var bagValue = __refvalue(tr, Double);
                var storage = GetDoubleStorage();

                lock (storage)
                {
                    if (!storage.TryGetValue(name, out var propertyValue) || propertyValue != bagValue)
                    {
                        storage[name] = bagValue;
                        raisePropertyChanged = true;
                    }
                }
            }
            else if (targetValue == typeof(Decimal))
            {
                EnsureIntegrity(name, typeof(TValue));

                var tr = __makeref(value);
                var bagValue = __refvalue(tr, Decimal);
                var storage = GetDecimalStorage();

                lock (storage)
                {
                    if (!storage.TryGetValue(name, out var propertyValue) || propertyValue != bagValue)
                    {
                        storage[name] = bagValue;
                        raisePropertyChanged = true;
                    }
                }
            }
            else if (targetValue == typeof(DateTime))
            {
                EnsureIntegrity(name, typeof(TValue));

                var tr = __makeref(value);
                var bagValue = __refvalue(tr, DateTime);
                var storage = GetDateTimeStorage();

                lock (storage)
                {
                    if (!storage.TryGetValue(name, out var propertyValue) || propertyValue != bagValue)
                    {
                        storage[name] = bagValue;
                        raisePropertyChanged = true;
                    }
                }
            }
            else if (targetValue == typeof(String))
            {
                EnsureIntegrity(name, typeof(TValue));

                var tr = __makeref(value);
                var bagValue = __refvalue(tr, String);
                var storage = GetStringStorage();

                lock (storage)
                {
                    if (!storage.TryGetValue(name, out var propertyValue) || propertyValue != bagValue)
                    {
                        storage[name] = bagValue;
                        raisePropertyChanged = true;
                    }
                }
            }

            // Fallback to object store
            else 
            {
                EnsureIntegrity(name, typeof(TValue));

                var tr = __makeref(value);
                var bagValue = __refvalue(tr, object);
                var storage = GetObjectStorage();

                lock (storage)
                {
                    if (!storage.TryGetValue(name, out var propertyValue) || !ReferenceEquals(propertyValue, bagValue))
                    {
                        storage[name] = bagValue;
                        raisePropertyChanged = true;
                    }
                }
            }

            if (raisePropertyChanged)
            {
                RaisePropertyChanged(name);
            }
        }
    }
}